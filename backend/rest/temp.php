<?php
header('Content-Type: application/json');

require_once dirname(__DIR__, 3) . DIRECTORY_SEPARATOR . 'config_v2.php';

require_once dirname(__DIR__) . DIRECTORY_SEPARATOR . 'tools.php';
require_once dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'classes' . DIRECTORY_SEPARATOR . 'MissionsManager.php';
$missionsManager = new MissionsManager();

$return;
$return["success"] = false;

if (!isRequestAuthenticated() || true) { // only manually enabled
    $return["message"] = "You are not authorized to use this service. Please use a right key.";
} else {
    switch ($_POST["action"]) {
        case 'add-auto-generated-missions':
            addGeneratedMissions();
            break;
        case 'update-mission-rewards':
            updateMissionRewards();
            break;
        default:
            $return["message"] = "The action is not correct";
            $return["success"] = false;
            break;
    }
}

echo json_encode($return);

function addGeneratedMissions()
{
    global $return, $missionsManager;

    if (isset($_POST['missions'])) {
        try {
            $missionsJson = json_decode($_POST["missions"]);
            foreach ($missionsJson as $mission) {
                $missionsManager->addAutoGeneratedMission(intval($mission->start_id), intval($mission->end_id), intval($mission->passengers), intval($mission->reward), $mission->name);
            }
            $return["success"] = true;
            $return["message"] = "test";
        } catch (Exception $e) {
            $return["success"] = false;
            $return["message"] = $e->getMessage();
        }
    } else {
        $return["success"] = false;
        $return["message"] = "Not enough information in the request";
    }
}

function updateMissionRewards()
{
    global $return, $missionsManager;

    try {
        $missionsManager->updateMissionRewards();
        $return["success"] = true;
    } catch (Exception $e) {
        $return["success"] = false;
        $return["message"] = $e->getMessage();
    }
}
